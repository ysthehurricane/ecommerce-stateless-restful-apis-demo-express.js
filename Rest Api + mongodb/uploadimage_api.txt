Upload image in API

link = https://www.youtube.com/watch?v=srPXMt1Q0nY&list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q&index=10&ab_channel=Academind

1) install package = npm install --save multer  // it is form data body body parser
2)open product.js route file

//upload files or images
const multer = require("multer");

const storageImages = multer.diskStorage({

    destination : function(req, file, callback){
        callback(null, './uploads/');
    },
    filename: function(req, file, callback){
        callback(null, new Date().toISOString() + file.originalname);
    }
});

const filefilter = (req, file, callback) => {
    if(file.mimetype === 'image/jpeg' || file.mimetype === 'image/png'){
        callback(null,true);
    }else{
        callback(new Error("Invalid file format"), false);
    }
};

const upload = multer({
    storage : storageImages,
     limits : {
    fileSize : 1024 * 1024 * 5
    },
    fileFilter : filefilter
});


// product schema 
const mongoose = require("mongoose");

const productSchema = mongoose.Schema({
    _id : mongoose.Schema.Types.ObjectId,
    name : { type : String , required : true },
    price : { type : Number , required : true },
    productImage : {type : String, required : true}
})

module.exports = mongoose.model('Product', productSchema);

with  image field
router.post('/', upload.single('productImage') , (req,res,next)=>{
    
    console.log(req.file)
    
    //fetch data from application and make instance for db
    const productDB = new productModel({
        _id : new mongoose.Types.ObjectId(),
        name : req.body.name,
        price : req.body.price,
        productImage : req.file.path
    });

    //save data in mongoDB
    productDB.save().then(result => {
        console.log(result);
        res.status(200).json({
            message: "Created product successfully ",
            createdProduct: {
                name : result.name,
                price : result.price,
                _id : result._id,
                request:{
                    type: 'GET',
                    url: 'http://localhost:3000/products/' + result._id
                }
            }
        });
    }).catch(error => {
        console.log(error);
        res.status(500).json({error : error});
    });
    
});

app.js file
//uploads function permission to available publically for accessing
app.use('/uploads',express.static('uploads'));


//getting image
router.get('/',(req,res,next)=>{

    productModel.find()
    .select("name price _id productImage")
    .exec()
    .then(result =>{
        
        //check reords are empty or not
        if(result.length >= 0){
             
            const response = {
                count: result.length,
                products : result.map(doc => {
                    return{
                        name : doc.name,
                        price : doc.price,
                        productImage : doc.productImage,
                        _id : doc._id,
                        request : {
                            type : 'GET',
                            url : 'http://localhost:3000/products/' + doc._id
                        }
                    }
                })
            }
            res.status(201).json(response);
        
        }else{
            res.status(500).json({
                message : "No records are available."
            });
        }
        
    }).catch(error => {

        console.log(error);
        res.status(500).json({
            error : error
        });
    });
});